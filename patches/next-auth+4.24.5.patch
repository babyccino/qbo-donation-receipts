diff --git a/node_modules/next-auth/adapters.d.ts b/node_modules/next-auth/adapters.d.ts
index df10b71..cdece27 100644
--- a/node_modules/next-auth/adapters.d.ts
+++ b/node_modules/next-auth/adapters.d.ts
@@ -1,4 +1,4 @@
-import { Account, User, Awaitable } from ".";
+import { Account, User, Awaitable, Profile } from ".";
 export interface AdapterUser extends User {
     id: string;
     email: string;
@@ -55,42 +55,57 @@ export interface VerificationToken {
  * [Create a custom adapter](https://next-auth.js.org/tutorials/creating-a-database-adapter)
  */
 export interface Adapter {
-    createUser?: (user: Omit<AdapterUser, "id">) => Awaitable<AdapterUser>;
-    getUser?: (id: string) => Awaitable<AdapterUser | null>;
-    getUserByEmail?: (email: string) => Awaitable<AdapterUser | null>;
+    createUser?: (user: Omit<AdapterUser, "id">) => Awaitable<AdapterUser>
+    getUser?: (id: string) => Awaitable<AdapterUser | null>
+    getUserByEmail?: (email: string) => Awaitable<AdapterUser | null>
     /** Using the provider id and the id of the user for a specific account, get the user. */
-    getUserByAccount?: (providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">) => Awaitable<AdapterUser | null>;
-    updateUser?: (user: Partial<AdapterUser> & Pick<AdapterUser, "id">) => Awaitable<AdapterUser>;
+    getUserByAccount?: (
+      providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">
+      ) => Awaitable<{user: AdapterUser; account: AdapterAccount} | null>
+    updateUser?: (
+      user: Partial<AdapterUser> & Pick<AdapterUser, "id">
+    ) => Awaitable<AdapterUser>
     /** @todo Implement */
-    deleteUser?: (userId: string) => Promise<void> | Awaitable<AdapterUser | null | undefined>;
-    linkAccount?: (account: AdapterAccount) => Promise<void> | Awaitable<AdapterAccount | null | undefined>;
+    deleteUser?: (
+      userId: string
+    ) => Promise<void> | Awaitable<AdapterUser | null | undefined>
+    linkAccount?: (
+      account: AdapterAccount, profile: Profile
+    ) => Promise<void> | Awaitable<AdapterAccount | null | undefined>
     /** @todo Implement */
-    unlinkAccount?: (providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">) => Promise<void> | Awaitable<AdapterAccount | undefined>;
+    unlinkAccount?: (
+      providerAccountId: Pick<AdapterAccount, "provider" | "providerAccountId">
+    ) => Promise<void> | Awaitable<AdapterAccount | undefined>
     /** Creates a session for the user and returns it. */
     createSession?: (session: {
-        sessionToken: string;
-        userId: string;
-        expires: Date;
-    }) => Awaitable<AdapterSession>;
-    getSessionAndUser?: (sessionToken: string) => Awaitable<{
-        session: AdapterSession;
-        user: AdapterUser;
-    } | null>;
-    updateSession?: (session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">) => Awaitable<AdapterSession | null | undefined>;
+      sessionToken: string
+      userId: string
+      expires: Date
+    }, account: AdapterAccount, profile: Profile) => Awaitable<AdapterSession>
+    getSessionAndUser?: (
+      sessionToken: string
+    ) => Awaitable<{ session: AdapterSession; user: AdapterUser } | null>
+    updateSession?: (
+      session: Partial<AdapterSession> & Pick<AdapterSession, "sessionToken">
+    ) => Awaitable<AdapterSession | null | undefined>
     /**
      * Deletes a session from the database.
      * It is preferred that this method also returns the session
      * that is being deleted for logging purposes.
      */
-    deleteSession?: (sessionToken: string) => Promise<void> | Awaitable<AdapterSession | null | undefined>;
-    createVerificationToken?: (verificationToken: VerificationToken) => Awaitable<VerificationToken | null | undefined>;
+    deleteSession?: (
+      sessionToken: string
+    ) => Promise<void> | Awaitable<AdapterSession | null | undefined>
+    createVerificationToken?: (
+      verificationToken: VerificationToken
+    ) => Awaitable<VerificationToken | null | undefined>
     /**
      * Return verification token from the database
      * and delete it so it cannot be used again.
      */
     useVerificationToken?: (params: {
-        identifier: string;
-        token: string;
-    }) => Awaitable<VerificationToken | null>;
-}
+      identifier: string
+      token: string
+    }) => Awaitable<VerificationToken | null>
+  }
 //# sourceMappingURL=adapters.d.ts.map
\ No newline at end of file
diff --git a/node_modules/next-auth/core/lib/callback-handler.js b/node_modules/next-auth/core/lib/callback-handler.js
index 9316bd0..19c70f9 100644
--- a/node_modules/next-auth/core/lib/callback-handler.js
+++ b/node_modules/next-auth/core/lib/callback-handler.js
@@ -110,19 +110,20 @@ async function callbackHandler(params) {
       sessionToken: await generateSessionToken(),
       userId: user.id,
       expires: (0, _utils.fromDate)(options.session.maxAge)
-    });
+    }, account, profile);
     return {
       session,
       user,
       isNewUser
     };
   } else if (account.type === "oauth") {
-    const userByAccount = await getUserByAccount({
+    const row = await getUserByAccount({
       providerAccountId: account.providerAccountId,
       provider: account.provider
     });
 
-    if (userByAccount) {
+    if (row) {
+      const { user: userByAccount, account: adapterAccount } = row;
       if (user) {
         if (userByAccount.id === user.id) {
           return {
@@ -139,7 +140,7 @@ async function callbackHandler(params) {
         sessionToken: await generateSessionToken(),
         userId: userByAccount.id,
         expires: (0, _utils.fromDate)(options.session.maxAge)
-      });
+      }, adapterAccount, profile);
       return {
         session,
         user: userByAccount,
@@ -153,7 +154,7 @@ async function callbackHandler(params) {
 
         await linkAccount({ ...account,
           userId: user.id
-        });
+        }, profile);
         await ((_events$linkAccount = events.linkAccount) === null || _events$linkAccount === void 0 ? void 0 : _events$linkAccount.call(events, {
           user,
           account,
@@ -189,9 +190,9 @@ async function callbackHandler(params) {
       await ((_events$createUser2 = events.createUser) === null || _events$createUser2 === void 0 ? void 0 : _events$createUser2.call(events, {
         user
       }));
-      await linkAccount({ ...account,
+      const linkedAccount = await linkAccount({ ...account,
         userId: user.id
-      });
+      }, profile);
       await ((_events$linkAccount2 = events.linkAccount) === null || _events$linkAccount2 === void 0 ? void 0 : _events$linkAccount2.call(events, {
         user,
         account,
@@ -201,7 +202,7 @@ async function callbackHandler(params) {
         sessionToken: await generateSessionToken(),
         userId: user.id,
         expires: (0, _utils.fromDate)(options.session.maxAge)
-      });
+      }, linkedAccount, profile);
       return {
         session,
         user,
diff --git a/node_modules/next-auth/core/routes/callback.js b/node_modules/next-auth/core/routes/callback.js
index d30a999..1e28b2a 100644
--- a/node_modules/next-auth/core/routes/callback.js
+++ b/node_modules/next-auth/core/routes/callback.js
@@ -80,11 +80,11 @@ async function callback(params) {
           const {
             getUserByAccount
           } = adapter;
-          const userByAccount = await getUserByAccount({
+          const row = await getUserByAccount({
             providerAccountId: account.providerAccountId,
             provider: provider.id
           });
-          if (userByAccount) userOrProfile = userByAccount;
+          if (row) userOrProfile = row.user;
         }
 
         try {
diff --git a/node_modules/next-auth/core/routes/session.js b/node_modules/next-auth/core/routes/session.js
index 430f538..029f407 100644
--- a/node_modules/next-auth/core/routes/session.js
+++ b/node_modules/next-auth/core/routes/session.js
@@ -115,14 +115,7 @@ async function session(params) {
         }
 
         const sessionPayload = await callbacks.session({
-          session: {
-            user: {
-              name: user.name,
-              email: user.email,
-              image: user.image
-            },
-            expires: session.expires.toISOString()
-          },
+          session,
           user,
           newSession,
           ...(isUpdate ? {
diff --git a/node_modules/next-auth/src/adapters.ts b/node_modules/next-auth/src/adapters.ts
index a19fc78..02b642e 100644
--- a/node_modules/next-auth/src/adapters.ts
+++ b/node_modules/next-auth/src/adapters.ts
@@ -1,4 +1,4 @@
-import { Account, User, Awaitable } from "."
+import { Account, User, Awaitable, Profile } from "."
 
 export interface AdapterUser extends User {
   id: string
@@ -75,7 +75,7 @@ export interface Adapter {
     userId: string
   ) => Promise<void> | Awaitable<AdapterUser | null | undefined>
   linkAccount?: (
-    account: AdapterAccount
+    account: AdapterAccount, profile: Profile
   ) => Promise<void> | Awaitable<AdapterAccount | null | undefined>
   /** @todo Implement */
   unlinkAccount?: (
@@ -86,7 +86,7 @@ export interface Adapter {
     sessionToken: string
     userId: string
     expires: Date
-  }) => Awaitable<AdapterSession>
+  }, account: AdapterAccount, profile: Profile) => Awaitable<AdapterSession>
   getSessionAndUser?: (
     sessionToken: string
   ) => Awaitable<{ session: AdapterSession; user: AdapterUser } | null>
diff --git a/node_modules/next-auth/src/core/routes/session.ts b/node_modules/next-auth/src/core/routes/session.ts
index ff1dc8e..d58513f 100644
--- a/node_modules/next-auth/src/core/routes/session.ts
+++ b/node_modules/next-auth/src/core/routes/session.ts
@@ -136,10 +136,7 @@ export default async function session(
         const sessionPayload = await callbacks.session({
           // By default, only exposes a limited subset of information to the client
           // as needed for presentation purposes (e.g. "you are logged in as...").
-          session: {
-            user: { name: user.name, email: user.email, image: user.image },
-            expires: session.expires.toISOString(),
-          },
+          session,
           user,
           newSession,
           ...(isUpdate ? { trigger: "update" } : {}),
diff --git a/node_modules/next-auth/src/core/types.ts b/node_modules/next-auth/src/core/types.ts
index 9759211..7284d24 100644
--- a/node_modules/next-auth/src/core/types.ts
+++ b/node_modules/next-auth/src/core/types.ts
@@ -18,6 +18,7 @@ import type { CookieSerializeOptions } from "cookie"
 import type { NextApiRequest, NextApiResponse } from "next"
 
 import type { InternalUrl } from "../utils/parse-url"
+import { AdapterSession } from "next-auth/adapters"
 
 export type Awaitable<T> = T | PromiseLike<T>
 
@@ -319,8 +320,7 @@ export interface CallbacksOptions<P = Profile, A = Account> {
   session: (
     params:
       | {
-          session: Session
-          /** Available when {@link SessionOptions.strategy} is set to `"jwt"` */
+          session: AdapterSession
           token: JWT
           /** Available when {@link SessionOptions.strategy} is set to `"database"`. */
           user: AdapterUser
